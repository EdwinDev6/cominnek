// This file is to add all commands generated by plugins

package cmd

import (
	"fmt"

	"github.com/Minnek-Digital-Studio/cominnek/controllers/app"
	"github.com/Minnek-Digital-Studio/cominnek/pkg/shell"
	"github.com/spf13/cobra"
)

var flags []app.IFlag
var subFlags [][]app.IFlag
var indexer []struct {
	Index int
	Name  string
}

func mainLoader(plugin app.IPlugin) cobra.Command {
	cmd := cobra.Command{
		Use:     plugin.Name,
		Short:   plugin.Help,
		Version: plugin.Version,
		Run: func(cmd *cobra.Command, args []string) {
			var _flags string
			for _, flag := range flags {
				_flags += fmt.Sprintf(" --%s %s", flag.Long, GetData(flag, *cmd))
			}

			// println(plugin.Exec + _flags)
			shell.OutLive(plugin.Exec + _flags)
		},
	}

	cmd.SetVersionTemplate(plugin.Name + " {{.Version}}\n")
	return cmd
}

func subLoader(subCommad app.IScripts, path string) cobra.Command {

	path += " " + subCommad.Name
	if subCommad.Exec != "" {
		path = " " + subCommad.Exec
	}

	cmd := cobra.Command{
		Use:   subCommad.Name,
		Short: subCommad.Help,
		Run: func(cmd *cobra.Command, args []string) {
			for _, index := range indexer {
				if index.Name != subCommad.Name {
					continue
				}

				flg := subFlags[index.Index]
				var _flags string

				for _, flag := range flg {
					_flags += fmt.Sprintf(" --%s %s", flag.Long, GetData(flag, *cmd))
				}

				// println(path + _flags)
				shell.OutLive(path + _flags)
			}
		},
	}

	setSubCommand(&cmd, subCommad.Scripts, path)

	return cmd
}

func setSubCommand(cmd *cobra.Command, sub []app.IScripts, path string) {
	if len(sub) > 0 {
		for _, sub := range sub {
			subLoad := subLoader(sub, path)
			pos := len(subFlags)
			subFlags = append(subFlags, sub.Flags)
			indexer = append(indexer, struct {
				Index int
				Name  string
			}{
				Index: pos,
				Name:  sub.Name,
			})

			for _, flag := range sub.Flags {
				FlagLoader(flag, &subLoad)
			}

			cmd.AddCommand(&subLoad)
		}
	}
}

func FlagLoader(flag app.IFlag, cmd *cobra.Command) {
	if flag.Type == "bool" {
		defaultF := flag.Default.(bool)
		cmd.PersistentFlags().BoolP(flag.Long, flag.Short, defaultF, flag.Help)
	}

	if flag.Type == "string" {
		defaultF := flag.Default.(string)
		cmd.PersistentFlags().StringP(flag.Long, flag.Short, defaultF, flag.Help)
	}
}

func GetData(flag app.IFlag, cmd cobra.Command) interface{} {
	val := cmd.PersistentFlags().Lookup(flag.Long).Value

	if flag.Type == "string" {
		if val.String() == "" {
			return `" "`
		}
		return `"` + val.String() + `"`
	}
	return val
}

func init() {
	app.ConfigReader()
	plugins := app.PluginsConfig

	for _, plugin := range plugins {
		mainLoad := mainLoader(plugin)

		setSubCommand(&mainLoad, plugin.Scripts, plugin.Exec)

		flags = plugin.Flags

		for _, flag := range plugin.Flags {
			FlagLoader(flag, &mainLoad)
		}

		rootCmd.AddCommand(&mainLoad)
	}

}
